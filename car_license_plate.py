



# -*- coding: utf-8 -*-
"""번호판detection모듈화.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f2ikOBIaAFgtorHN5NexWP6PWk0UC81Z
"""

import os
import cv2
import numpy as np
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt

from glob import glob
from skimage import io
from shutil import copy
from google.colab.patches import cv2_imshow
from IPython.display import Image


 # settings
INPUT_WIDTH =  640
INPUT_HEIGHT = 640


def result(model_path, image_path):
  net = cv2.dnn.readNetFromONNX(model_path)
    
  def get_detections(img,net):
      # 1.CONVERT IMAGE TO YOLO FORMAT
      image = img.copy()
      row, col, d = image.shape

      max_rc = max(row,col)
      input_image = np.zeros((max_rc,max_rc,3),dtype=np.uint8)
      input_image[0:row,0:col] = image

      # 2. GET PREDICTION FROM YOLO MODEL
      blob = cv2.dnn.blobFromImage(input_image,1/255,(INPUT_WIDTH,INPUT_HEIGHT),swapRB=True,crop=False)
      
      net.setInput(blob)
      preds = net.forward()
      detections = preds[0]
      
      
      return input_image, detections

  def non_maximum_supression(input_image,detections):
      
      # 3. FILTER DETECTIONS BASED ON CONFIDENCE AND PROBABILIY SCORE
      
      # center x, center y, w , h, conf, proba
      boxes = []
      confidences = []

      image_w, image_h = input_image.shape[:2]
      x_factor = image_w/INPUT_WIDTH
      y_factor = image_h/INPUT_HEIGHT

      for i in range(len(detections)):
          row = detections[i]
          confidence = row[4] # confidence of detecting license plate
          if confidence > 0.2:
              class_score = row[5] # probability score of license plate
              if class_score > 0.25:
                  cx, cy , w, h = row[0:4]

                  left = int((cx - 0.5*w)*x_factor)
                  top = int((cy-0.5*h)*y_factor)
                  width = int(w*x_factor)
                  height = int(h*y_factor)
                  box = np.array([left,top,width,height])

                  confidences.append(confidence)
                  boxes.append(box)           
      
      # 4.1 CLEAN
      boxes_np = np.array(boxes).tolist()
      confidences_np = np.array(confidences).tolist()
      
      # 4.2 NMS
      index = cv2.dnn.NMSBoxes(boxes_np,confidences_np,0.25,0.45)
      

      return boxes_np, confidences_np, index

  def drawings(image,boxes_np,confidences_np,index):
      # 5. Drawings
      for ind in index:
          x,y,w,h =  boxes_np[ind]
          bb_conf = confidences_np[ind]

          cv2.rectangle(image,(x,y),(x+w,y+h),(255,0,255),2)      # 바운딩 박스 그리기

      return (image,x,y,w,h)

  # predictions flow with return result
  def yolo_predictions(img,net):
      # step-1: detections
      input_image, detections = get_detections(img,net)
      # step-2: NMS
      boxes_np, confidences_np, index = non_maximum_supression(input_image, detections)
      # step-3: Drawings
      result_img, x,y,w,h = drawings(img,boxes_np,confidences_np,index=index)
      
      return (result_img, x,y,w,h)


  img = io.imread(image_path)
  result_image,x,y,w,h= yolo_predictions(img,net)

  license_plate = result_image[y:y+h, x:x+w]
  # license_plate = cv2.resize(license_plate, dsize=(300,150))

  return license_plate
